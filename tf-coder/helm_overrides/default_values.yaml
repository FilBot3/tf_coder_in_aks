# storageClassName -- Sets the storage class for all Coder services and user
# environments. By default the storageClassName is not specified and thus the
# default StorageClass is used. If storageClassName is not specified and a
# default StorageClass does not exist, then the deployment will fail. The
# storageClass MUST support the ReadWriteOnce access mode.
storageClassName: ""

# serviceType -- See the following for the different serviceType options and
# their use:
# https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
serviceType: "ClusterIP"

# podSecurityPolicyName -- The name of the pod security policy to apply to all
# Coder services and user environments. The optional ingress has its own field
# for pod security policy as well.
podSecurityPolicyName: ""

# clusterDomainSuffix -- If you've set a custom default domain for your
# cluster, you may need to remove or change this DNS suffix for service
# resolution to work correctly.
clusterDomainSuffix: ".svc.cluster.local"

# contains configuration for the bundled ingress controller.
ingress:
  # ingress.useDefault -- If set to true will deploy an nginx ingress that will
  # allow you to access Coder from an external IP address, but if your
  # kubernetes cluster is configured to provision external IP addresses. If you
  # would like to bring your own ingress and hook Coder into that instead, set
  # this value to false.
  useDefault: true
  # ingress.host -- The hostname to use for accessing the platform. This can
  # be left blank and the user can still access the platform from the external
  # IP or a DNS name that resolves to the external IP address.
  host: ""
  # ingress.podSecurityPolicyName -- The name of the pod security policy the
  # built in ingress controller should abide. It should be noted that the
  # ingress controller requires the `NET_BIND_SERVICE` capability, privilege
  # escalation, and access to privileged ports to successfully deploy.
  podSecurityPolicyName: ""
  # ingress.additionalAnnotations -- Additional annotations to be used when
  # creating the ingress. These only apply to the Ingress Kubernetes kind.
  # The annotations can be used to specify certificate issuers or
  # other cloud provider specific integrations. Annotations are provided as
  # strings e.g. [ "mykey:myvalue", "mykey2:myvalue2" ]
  additionalAnnotations: []
  # ingress.tls -- TLS options for the ingress. The hosts used for the tls
  # configuration come from the ingress.host and the devurls.host variables. If
  # those don't exist, then the TLS configuration will be ignored.
  tls:
    # ingress.tls.enable -- Enables the tls configuration.
    enable: false
    # ingress.tls.hostSecretName -- The secret to use for the ingress.host
    # hostname.
    hostSecretName: ""
    # ingress.tls.devurlsHostSecretName -- The secret to use for the
    # devurls.host hostname.
    devurlsHostSecretName: ""
  # ingress.service -- Options related to the ingress Kubernetes Service object.
  service:
    # ingress.service.annotations -- Additional annotations to add to the Service
    # object. For example to make the ingress spawn an internal load balancer:
    # annotations:
    #  cloud.google.com/load-balancer-type: "Internal"
    annotations: {}

devurls:
  # devurls.host -- Should be a wildcard hostname to allow matching against
  # custom-created dev URLs. Leaving as an empty string results in devurls
  # being disabled. Example: "*.devurls.coder.com".
  host: ""

# Contains fields related to the Postgres backend. If providing your own
# instance, a minimum version of Postgres 11 is required with the contrib
# package installed.
postgres:
  # postgres.useDefault -- Deploys an internal Postgres instance alongside the platform.
  # It is not recommended to run the internal Postgres instance in production.
  # If true, all other values are ignored.
  useDefault: true
  # postgres.host -- The host of the external postgres instance.
  host: ""
  # postgres.port -- The port of the external postgres instance.
  port: ""
  # postgres.user -- the user of the external postgres instance.
  user: ""
  # postgres.database -- The name of the database that coder will use. It must
  # exist before Coder is installed.
  database: ""
  # postgres.passwordSecret -- The name of an existing secret in the current
  # namespace with the password to the Postgres instance. The password must be
  # contained in the secret field `password`. This should be set to an empty
  # string if the database does not require a password to connect.
  passwordSecret: ""
  # postgres.sslMode -- Determines how the connection is made to the database.
  # The acceptable values are: `disable`, `allow`, `prefer`, `require`,
  # `verify-ca`, and `verify-full`.
  sslMode: "require"

# imagePullPolicy -- Sets the policy for pulling a container image across all
# services.
imagePullPolicy: Always

# Contains configuration the REST API handling CRUD operations to
# the platform.
cemanager:
  # cemanager.accessURL -- The cemanager access URL that the envproxy will use
  # to communicate with the cemanager. This should be a full URL complete with
  # protocol and no trailing slash. Uses internal cluster URL if not set.
  # e.g. https://manager.coder.com
  accessURL: ""
  # cemanager.replicas -- The number of replicas to run of the manager.
  replicas: 1
  # cemanager.image -- Injected during releases.
  image: ""
  # cemanager.resources -- Kubernetes resource request and limits for cemanager
  # pods.
  # To unset a value, set it to "".
  # To unset all values, you can provide a values.yaml file which sets resources
  # to nil. See values.yaml for an example.
  #
  # e.g:
  # cemanager:
  #   # This will cause all values to be unset.
  #   resources:
  #   replica: 1
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "250m"
      memory: "512Mi"

# Contains the user interface of the platform.
dashboard:
  # dashboard.replicas -- The number of replicas to run of the dashboard.
  replicas: 1
  # dashboard.image -- Injected during releases.
  image: ""
  # dashboard.resources -- Kubernetes resource request and limits for dasboard
  # pods.
  # To unset a value, set it to "".
  # To unset all values, you can provide a values.yaml file which sets resources
  # to nil. See values.yaml for an example.
  #
  # e.g:
  # dashboard:
  #   # This will cause all values to be unset.
  #   resources:
  #   replica: 1
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "250m"
      memory: "512Mi"

# envproxy contains configuration for the service handling long-lived
# connections to environments such as IDE or shell sessions.
envproxy:
  # envproxy.accessURL -- The URL reported to cemanager. Must be accessible by
  # cemanager and all users who can use this workspace provider. This should be
  # a full URL, complete with protocol and trailing "/proxy" (no trailing
  # slash). This is derived from the ingress.host or the access URL set during
  # cemanager setup if not set.
  # e.g. "https://proxy.coder.com/proxy"
  accessURL: ""
  # envproxy.clusterAddress -- The address of the K8s cluster, must be reachable
  # from the cemanager. Defaults to
  # "https://kubernetes.default.$clusterDomainSuffix:443" if not set.
  clusterAddress: ""
  # envproxy.replicas -- The number of replicas to run of the envproxy.
  replicas: 1
  # envproxy.image -- Injected during releases.
  image: ""
  # envproxy.resources -- Kubernetes resource request and limits for envproxy
  # pods.
  # To unset a value, set it to "".
  # To unset all values, you can provide a values.yaml file which sets resources
  # to nil. See values.yaml for an example.
  #
  # e.g:
  # envproxy:
  #   # This will cause all values to be unset.
  #   resources:
  #   replica: 1
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "250m"
      memory: "512Mi"
  # envproxy.terminationGracePeriodSeconds -- Amount of seconds to wait before
  # shutting down the environment proxy if there are still open connections.
  # This is set very long intentionally so developers do not deal with
  # disconnects during deployments.
  terminationGracePeriodSeconds: 14400

# timescale -- Contains configuration for the internal database. It is not
# recommended to run this service in production. See the `postgres` section for
# connecting to an external Postgres database.
timescale:
  # timescale.image -- Injected during releases.
  image: ""
  # timescale.resources -- Kubernetes resource request and limits for the
  # timescale pod.
  # To unset a value, set it to "".
  # To unset all values, you can provide a values.yaml file which sets resources
  # to nil. See values.yaml for an example.
  #
  # e.g:
  # timescale:
  #   # This will cause all values to be unset.
  #   resources:
  resources:
    requests:
      cpu: "250m"
      memory: "1Gi"
      # timescale.resources.requests.storage -- Specifies the size of the
      # volume claim for persisting the database.
      storage: "10Gi"
    limits:
      cpu: "250m"
      memory: "1Gi"

envbox:
  # envbox.image -- Injected during releases.
  image: ""

envbuilder:
  # envbuilder.image -- Injected during releases.
  image: ""

# environments defines configuration that is applied to all
# user environments.
environments:
  # environments.tolerations -- Tolerations are applied to all user
  # environments. Each element is a regular pod toleration object. To set
  # service tolerations see serviceTolerations. See values.yaml for an example.
  #
  # e.g.
  # tolerations:
  # - key: "my key"
  #   operator: "Exists"
  #   effect: "NoExecute"
  #   tolerationSeconds: 6000
  tolerations: []

# certs -- Describes CAs that should be added to Coder services. These certs
# are NOT added to environments.
certs:
  secret:
    # certs.secret.name -- The name of the secret.
    name: ""
    # certs.secret.key -- The key in the secret pointing to the certificate
    # bundle.
    key: ""

# namespaceWhitelist -- A list of additional namespaces that environments may
# be deploy to.
namespaceWhitelist: []

ssh:
  # ssh.enable -- Enables accessing environments via SSH.
  enable: true

# serviceTolerations -- Tolerations are applied to all Coder managed services.
# Each element is a toleration object. To set user environment tolerations see
# environments.tolerations. See values.yaml for an example.
#
# e.g.
# serviceTolerations:
# - key: "my key"
#   operator: "Exists"
#   effect: "NoExecute"
#   tolerationSeconds: 6000
serviceTolerations: []

# logging configures the logging format of Coder services. Specify one
# or more targets for logging output. If you have multiple output
# targets configured, coder will write output to multiple targets.
logging:
  # logging.human -- Where to send logs that are formatted for readability by a
  # human. Set to an empty string to disable.
  human: /dev/stderr
  # logging.stackdriver -- Where to send logs that are formatted for Google
  # Stackdriver. Set to an empty string to disable.
  stackdriver: ""
  # logging.json -- Where to send logs that are formatted as JSON. Set to an
  # empty string to disable.
  json: ""

  # logging.splunk -- Coder can send logs directly to Splunk, in
  # addition to file-based output, if these values are configured. The
  # channel is optional, and this logging is disabled if either the
  # URL and Token are set to the empty string.
  splunk:
    # logging.splunk.url -- The Splunk HEC collector endpoint.
    url: ""
    # logging.splunk.token -- The Splunk HEC collector token.
    token: ""
    # logging.splunk_channel -- Optional. Specify the channel that you'd
    # like to associate with all messages.
    channel: ""
